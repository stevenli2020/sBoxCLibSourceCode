.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RAND_DRBG_NEW 3"
.TH RAND_DRBG_NEW 3 "2020-07-27" "3.0.0-alpha6-dev" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RAND_DRBG_new_ex,
RAND_DRBG_new,
RAND_DRBG_set,
RAND_DRBG_set_defaults,
RAND_DRBG_instantiate,
RAND_DRBG_uninstantiate,
RAND_DRBG_free,
RAND_DRBG_verify_zeroization
\&\- initialize and cleanup a RAND_DRBG instance
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rand_drbg.h>
\&
\& RAND_DRBG *RAND_DRBG_new_ex(OPENSSL_CTX *ctx,
\&                             int type,
\&                             unsigned int flags,
\&                             RAND_DRBG *parent);
\&
\& RAND_DRBG *RAND_DRBG_new(int type,
\&                          unsigned int flags,
\&                          RAND_DRBG *parent);
\&
\& int RAND_DRBG_set_defaults(int type, unsigned int flags);
\&
\& int RAND_DRBG_instantiate(RAND_DRBG *drbg,
\&                           const unsigned char *pers, size_t perslen);
\&
\& int RAND_DRBG_uninstantiate(RAND_DRBG *drbg);
\&
\& void RAND_DRBG_free(RAND_DRBG *drbg);
\& int RAND_DRBG_verify_zeroization(RAND_DRBG *drbg);
.Ve
.PP
Deprecated since OpenSSL 3.0, can be hidden entirely by defining
\&\fB\s-1OPENSSL_API_COMPAT\s0\fR with a suitable version value, see
\&\fIopenssl_user_macros\fR\|(7):
.PP
.Vb 2
\& int RAND_DRBG_set(RAND_DRBG *drbg,
\&                   int type, unsigned int flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIRAND_DRBG_new_ex()\fR creates a new \s-1DRBG\s0 instance of the given \fBtype\fR for the
given \s-1OPENSSL_CTX\s0 <ctx>.
The <ctx> parameter can be \s-1NULL\s0 in which case the default \s-1OPENSSL_CTX\s0 is used.
\&\fIRAND_DRBG_new()\fR is the same as \fIRAND_DRBG_new_ex()\fR except that the default
\&\s-1OPENSSL_CTX\s0 is always used.
.PP
\&\fIRAND_DRBG_set()\fR initializes the \fBdrbg\fR with the given \fBtype\fR and \fBflags\fR.
This function is deprecated.  Applications should instead use
\&\fIRAND_DRBG_new_ex()\fR to create a new \s-1DRBG.\s0
.PP
\&\fIRAND_DRBG_set_defaults()\fR sets the default \fBtype\fR and \fBflags\fR for new \s-1DRBG\s0
instances.
.PP
The \s-1DRBG\s0 types are AES-CTR, \s-1HMAC\s0 and \s-1HASH\s0 so \fBtype\fR can be one of the
following values:
.PP
NID_aes_128_ctr, NID_aes_192_ctr, NID_aes_256_ctr, NID_sha1, NID_sha224,
NID_sha256, NID_sha384, NID_sha512, NID_sha512_224, NID_sha512_256,
NID_sha3_224, NID_sha3_256, NID_sha3_384 or NID_sha3_512.
.PP
If this method is not called then the default type is given by NID_aes_256_ctr
and the default flags are zero.
.PP
Before the \s-1DRBG\s0 can be used to generate random bits, it is necessary to set
its type and to instantiate it.
.PP
The optional \fBflags\fR argument specifies a set of bit flags which can be
joined using the | operator. The supported flags are:
.IP "\s-1RAND_DRBG_FLAG_CTR_NO_DF\s0" 4
.IX Item "RAND_DRBG_FLAG_CTR_NO_DF"
Disables the use of the derivation function ctr_df. For an explanation,
see [\s-1NIST SP 800\-90A\s0 Rev. 1].
.IP "\s-1RAND_DRBG_FLAG_HMAC\s0" 4
.IX Item "RAND_DRBG_FLAG_HMAC"
Enables use of \s-1HMAC\s0 instead of the \s-1HASH DRBG.\s0
.IP "\s-1RAND_DRBG_FLAG_PRIMARY\s0" 4
.IX Item "RAND_DRBG_FLAG_PRIMARY"
.PD 0
.IP "\s-1RAND_DRBG_FLAG_PUBLIC\s0" 4
.IX Item "RAND_DRBG_FLAG_PUBLIC"
.IP "\s-1RAND_DRBG_FLAG_PRIVATE\s0" 4
.IX Item "RAND_DRBG_FLAG_PRIVATE"
.PD
These 3 flags can be used to set the individual \s-1DRBG\s0 types created. Multiple
calls are required to set the types to different values. If none of these 3
flags are used, then the same type and flags are used for all 3 DRBGs in the
\&\fBdrbg\fR chain (<master>, <public> and <private>).
.PP
If a \fBparent\fR instance is specified then this will be used instead of
the default entropy source for reseeding the \fBdrbg\fR. It is said that the
\&\fBdrbg\fR is \fIchained\fR to its \fBparent\fR.
For more information, see the \s-1NOTES\s0 section.
.PP
\&\fIRAND_DRBG_instantiate()\fR
seeds the \fBdrbg\fR instance using random input from trusted entropy sources.
Optionally, a personalization string \fBpers\fR of length \fBperslen\fR can be
specified.
To omit the personalization string, set \fBpers\fR=NULL and \fBperslen\fR=0;
.PP
\&\fIRAND_DRBG_uninstantiate()\fR
clears the internal state of the \fBdrbg\fR and puts it back in the
uninstantiated state.
.PP
\&\fIRAND_DRBG_verify_zeroization()\fR confirms if the internal \s-1DRBG\s0 state is
currently zeroed.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fIRAND_DRBG_new_ex()\fR and \fIRAND_DRBG_new()\fR return a pointer to a \s-1DRBG\s0 instance
allocated on the heap.
.PP
\&\fIRAND_DRBG_set()\fR,
\&\fIRAND_DRBG_instantiate()\fR, and
\&\fIRAND_DRBG_uninstantiate()\fR
return 1 on success, and 0 on failure.
.PP
\&\fIRAND_DRBG_verify_zeroization()\fR returns 1 if the \s-1DRBG\s0 state is current zeroed,
and 0 if not.
.PP
\&\fIRAND_DRBG_free()\fR does not return a value.
.SH "NOTES"
.IX Header "NOTES"
The \s-1DRBG\s0 design supports \fIchaining\fR, which means that a \s-1DRBG\s0 instance can
use another \fBparent\fR \s-1DRBG\s0 instance instead of the default entropy source
to obtain fresh random input for reseeding, provided that \fBparent\fR \s-1DRBG\s0
instance was properly instantiated, either from a trusted entropy source,
or from yet another parent \s-1DRBG\s0 instance.
For a detailed description of the reseeding process, see \s-1\fIRAND_DRBG\s0\fR\|(7).
.PP
The default \s-1DRBG\s0 type and flags are applied only during creation of a \s-1DRBG\s0
instance.
To ensure that they are applied to the global and thread-local \s-1DRBG\s0 instances
(<master>, resp. <public> and <private>), it is necessary to call
\&\fIRAND_DRBG_set_defaults()\fR before creating any thread and before calling any
cryptographic routines that obtain random data directly or indirectly.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIRAND_DRBG_generate\fR\|(3),
\&\s-1\fIRAND_DRBG\s0\fR\|(7)
.SH "HISTORY"
.IX Header "HISTORY"
The \fIRAND_DRBG_set()\fR function was deprecated in OpenSSL 3.0.
.PP
The \s-1RAND_DRBG\s0 functions were added in OpenSSL 1.1.1.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2017\-2020 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
