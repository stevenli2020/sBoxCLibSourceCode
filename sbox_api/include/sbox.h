/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

#ifndef SBOX_H
#define SBOX_H

#include "abe/cpabe/cpabe_aes.h"

#ifdef __cplusplus
extern "C" {
#endif 

typedef cpabe_aes_t sbox_aes_t;
typedef cpabe_aes_ptr sbox_aes;

/**
input : 	token 	-> chosen from {SS512, MNT159, MNT202, MNT224, BN359, BN160, BN256, BN512}
output:		pp 		-> public parameters
			msk 	-> master secret key
*/
int sbox_init(char* token, char** pp, char** msk);

/**
input : 	pp 		-> public parameters
return:		 		-> a UUID string
*/
char* sbox_genABEUUID(char* pp);

/**
input : 	pp 		-> public parameters
			msk		-> master secret key
			attrs	-> a attribute name array, the last one must be NULL. for example, char *attrs[10]; attrs[9] = NULL
			len 	-> attrs length
output:		tk 		-> user tk
			dk	 	-> user sk
*/
int sbox_gen_uks(char* pp, char* msk, char** attrs, int len, char** tk, char** dk);

/**
input : 	pp 		-> public parameters
			aesbits	-> aes key length (128/192/256);
			policy	-> policy is combined with UUIDs generated by sbox_genABEUUID and AND symbol('&'), OR symbol('|'), and '(' ')'
			m 		-> data to encrypt
			mlen 	-> data length
output:		abec 	-> abe ciphertext
			aesc	-> aes ciphertext
*/
int sbox_enc(char* pp, int aesbits, char* policy, unsigned char* m, size_t mlen, char** abec, unsigned char** aesc);

/**
input : 	pp 		-> public parameters
			aesbits	-> aes key length (128/192/256);
			policy	-> policy is combined with UUIDs generated by sbox_genABEUUID and AND symbol('&'), OR symbol('|'), and '(' ')'
			mf 		-> data filename to be encrypted
			aescf 	-> ciphertext output filename
output:		abec 	-> abe ciphertext
*/
int sbox_enc_file(char* pp, int aesbits, char* policy, char* mf, char* aescf, char** abec);

/**
input : 	pp 		-> public parameters
			tk		-> user tk
output:		abec 	-> abe ciphertext
			abetc	-> tranformed abe ciphertext
*/
int sbox_transform(char* pp, char* tk, char* abec, char** abetc);

/**
input : 	pp 		-> public parameters
			dk		-> user dk
			abetc	-> tranformed abe ciphertext
			aesc 	-> aes ciphertext
			c_len	-> aes ciphertext length
output:		m 	 	-> decrypted data
return		into	-> data length
*/
int sbox_dec(char* pp, char* dk, char* abetc, unsigned char* aesc, size_t c_len, unsigned char** m);

/**
input : 	pp 		-> public parameters
			dk		-> user dk
			abetc	-> tranformed abe ciphertext
			npolicy	-> new policy
output:		abec 	-> new abe ciphertext
*/
int sbox_re_enc(char* pp, char* dk, char* abetc, char* npolicy, char** abec);

/**
input : 	pp 		-> public parameters
			dk		-> user dk
			abetc	-> tranformed abe ciphertext
			aescf 	-> aes ciphertext filename
			mf		-> plaintext output filename
output:		m 	 	-> decrypted data
return		into	-> data length
*/
int sbox_dec_file(char* pp, char* dk, char* abetc, char* aescf, char* mf);

/**
input : 	pp 		-> public parameters
			aes		-> aes key length (128/192/256);
			policy	-> policy is combined with UUIDs generated by sbox_genABEUUID and AND symbol('&'), OR symbol('|'), and '(' ')'
			abec	-> abe ciphertext
output:		aes 	-> aes ccm mod handle
*/
int sbox_enc_init(char* pp, int aesbits, char* policy, char** abec, sbox_aes aes);

/**
input : 	pp 		-> public parameters
			dk		-> user dk
			abetc	-> tranformed abe ciphertext
output:		aes 	-> aes ccm mod handle
*/
int sbox_dec_init(char* pp, char* dk, char* abetc, sbox_aes aes);

/**
input : 	aes 	-> aes ccm mod handle
			in		-> updated message
			in_len	-> updated message length
output:		out 	-> encrypted data
return:		int     -> encrypted data length (for example : 4096 message -> 4131 ciphertext); if < 0, encrypting failed!
*/
int sbox_aes_update(sbox_aes aes, unsigned char* in, size_t in_len, unsigned char* out);

/**
this operation will delete key
input : 	aes 	-> aes ccm mod handle
			in		-> updated message
			in_len	-> updated message length
output:		out 	-> encrypted data
return:		int     -> encrypted data length
*/
int sbox_aes_dofinal1(sbox_aes aes, unsigned char* in, size_t in_len, unsigned char* out);

/**
this operation will delete key
input : 	aes 	-> aes ccm mod handle
output:		out 	-> encrypted data
return:		int     -> encrypted data length
*/
int sbox_aes_dofinal0(sbox_aes aes, unsigned char* out);

/**
encrypt a file fin and output the cipher into fout
input : 	aes 	-> aes ccm mod handle
		 	fin 	-> filename to be encrypted
			fout 	-> encrypted filename
return:		int     -> encrypted data length
*/
int sbox_aes_file(sbox_aes aes, char* fin, char* fout);

/**
this operation can get the output len, which could be used to allocate memory
input : 	aes 	-> aes ccm mod handle
			in_len 	-> input length
return:		int     -> predicted output length
*/
size_t sbox_get_update_out_len(sbox_aes aes, size_t in_len);

/**
this operation can get the output len, which could be used to allocate memory
input : 	aes 	-> aes ccm mod handle
			in_len 	-> input length
return:		int     -> predicted output length
*/
size_t sbox_get_dofinal_out_len(sbox_aes aes, size_t in_len);
    
#ifdef __cplusplus
}
#endif

#endif /* SBOX_H */

